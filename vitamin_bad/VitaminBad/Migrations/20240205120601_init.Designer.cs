// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VitaminBad.Data;

#nullable disable

namespace VitaminBad.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240205120601_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("VitaminBad.Domain.Entity.Coordinate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Dolgota")
                        .HasColumnType("float");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Shirota")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.HasIndex("PathId");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Crew", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.ToTable("Crews");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Dron", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.ToTable("Drons");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Emploee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CrewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dolzhnost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.ToTable("Emploees");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Path", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DronId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Drone")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DronId");

                    b.ToTable("Paths");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.PNagruzka", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DronId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DronId")
                        .IsUnique()
                        .HasFilter("[DronId] IS NOT NULL");

                    b.ToTable("PNagruzkas");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.StatusEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.ToTable("StatusEvents");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.TypeEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.ToTable("TypeEvents");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Coordinate", b =>
                {
                    b.HasOne("VitaminBad.Domain.Entity.Event", "Event")
                        .WithOne("Coordinate")
                        .HasForeignKey("VitaminBad.Domain.Entity.Coordinate", "EventId");

                    b.HasOne("VitaminBad.Domain.Entity.Path", "Path")
                        .WithMany("Coordinates")
                        .HasForeignKey("PathId");

                    b.Navigation("Event");

                    b.Navigation("Path");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Crew", b =>
                {
                    b.HasOne("VitaminBad.Domain.Entity.Event", "Event")
                        .WithOne("Crew")
                        .HasForeignKey("VitaminBad.Domain.Entity.Crew", "EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Dron", b =>
                {
                    b.HasOne("VitaminBad.Domain.Entity.Event", "Event")
                        .WithOne("Dron")
                        .HasForeignKey("VitaminBad.Domain.Entity.Dron", "EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Emploee", b =>
                {
                    b.HasOne("VitaminBad.Domain.Entity.Crew", "Crew")
                        .WithMany("Emploee")
                        .HasForeignKey("CrewId");

                    b.Navigation("Crew");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Path", b =>
                {
                    b.HasOne("VitaminBad.Domain.Entity.Dron", "Dron")
                        .WithMany()
                        .HasForeignKey("DronId");

                    b.Navigation("Dron");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.PNagruzka", b =>
                {
                    b.HasOne("VitaminBad.Domain.Entity.Dron", "Dron")
                        .WithOne("PNagruzka")
                        .HasForeignKey("VitaminBad.Domain.Entity.PNagruzka", "DronId");

                    b.Navigation("Dron");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.StatusEvent", b =>
                {
                    b.HasOne("VitaminBad.Domain.Entity.Event", "Event")
                        .WithOne("StatusEvent")
                        .HasForeignKey("VitaminBad.Domain.Entity.StatusEvent", "EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.TypeEvent", b =>
                {
                    b.HasOne("VitaminBad.Domain.Entity.Event", "Event")
                        .WithOne("TypeEvent")
                        .HasForeignKey("VitaminBad.Domain.Entity.TypeEvent", "EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Crew", b =>
                {
                    b.Navigation("Emploee");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Dron", b =>
                {
                    b.Navigation("PNagruzka");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Event", b =>
                {
                    b.Navigation("Coordinate");

                    b.Navigation("Crew");

                    b.Navigation("Dron");

                    b.Navigation("StatusEvent");

                    b.Navigation("TypeEvent");
                });

            modelBuilder.Entity("VitaminBad.Domain.Entity.Path", b =>
                {
                    b.Navigation("Coordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
